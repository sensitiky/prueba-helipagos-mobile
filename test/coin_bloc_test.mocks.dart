// Mocks generated by Mockito 5.4.4 from annotations
// in prueba_helipagos_mobile/test/coin_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:prueba_helipagos_mobile/models/coin.dart' as _i6;
import 'package:prueba_helipagos_mobile/models/nft.dart' as _i2;
import 'package:prueba_helipagos_mobile/services/api_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNft_0 extends _i1.SmartFake implements _i2.Nft {
  _FakeNft_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i3.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  _i5.Future<List<_i6.Coin>> fetchCoins({
    int? page = 1,
    int? perPage = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCoins,
          [],
          {
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue: _i5.Future<List<_i6.Coin>>.value(<_i6.Coin>[]),
      ) as _i5.Future<List<_i6.Coin>>);

  @override
  _i5.Future<List<_i6.Coin>> searchCoins(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchCoins,
          [query],
        ),
        returnValue: _i5.Future<List<_i6.Coin>>.value(<_i6.Coin>[]),
      ) as _i5.Future<List<_i6.Coin>>);

  @override
  _i5.Future<List<_i2.Nft>> fetchNfts({
    int? page = 1,
    int? perPage = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNfts,
          [],
          {
            #page: page,
            #perPage: perPage,
          },
        ),
        returnValue: _i5.Future<List<_i2.Nft>>.value(<_i2.Nft>[]),
      ) as _i5.Future<List<_i2.Nft>>);

  @override
  _i5.Future<_i2.Nft> fetchNftDetails(
    String? assetPlatformId,
    String? contractAddress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNftDetails,
          [
            assetPlatformId,
            contractAddress,
          ],
        ),
        returnValue: _i5.Future<_i2.Nft>.value(_FakeNft_0(
          this,
          Invocation.method(
            #fetchNftDetails,
            [
              assetPlatformId,
              contractAddress,
            ],
          ),
        )),
      ) as _i5.Future<_i2.Nft>);
}
